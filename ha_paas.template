{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName", 
	"Default": "stackato",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "Region": {
      "Description" : "Region to deploy xdocker to",
      "Type" : "String",
      "Default" : "eu-central-1",
      "AllowedValues" : ["eu-central-1", "eu-west-1" ]
    },
    "AvailabilityZone1" : {
      "Description" : "First AZ to deploy xdocker to",
      "Type" : "String",
      "Default" : "eu-central-1a",
      "AllowedValues" : ["eu-central-1a", "eu-west-1a" ]
    },
    "AvailabilityZone2" : {
      "Description" : "Second AZ to deploy xdocker to",
      "Type" : "String",
      "Default" : "eu-central-1b",
      "AllowedValues" : ["eu-central-1b", "eu-west-1b" ]
    },
    "NatInstanceType" : {
      "Description" : "Instance type of NAT hosts",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues" : ["m3.medium"]
    },
    "BastionInstanceType" : {
      "Description" : "Instance type of bastion hosts",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.micro"]
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSRegionNatAMI" : {
      "eu-west-1"      : { "HVM64" : "ami-30913f47"},
      "eu-central-1"   : { "HVM64" : "ami-ac380eb1"}
    },

    "AWSRegionBastionAMI" : {
      "eu-west-1"      : { "HVM64" : "ami-6e7bd919"},
      "eu-central-1"   : { "HVM64" : "ami-b43503a9"}
    }
  },

  "Resources": {
    "xdockervpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "xdocker-vpc"
          }
        ]
      }
    },
    "publicaz1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone":   { "Ref" : "AvailabilityZone1" },
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public-az-1"
          }
        ]
      }
    },
    "publicaz2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone":   { "Ref" : "AvailabilityZone2" },
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "publicaz2"
          }
        ]
      }
    },
    "privateaz1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone":   { "Ref" : "AvailabilityZone1" },
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "privateaz1"
          }
        ]
      }
    },
    "privateaz2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone":   { "Ref" : "AvailabilityZone2" },
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private-az-2"
          }
        ]
      }
    },
    "internetgateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "xdocker-igw"
          }
        ]
      }
    },
    "xdockerdhcp": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "eu-west-1.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "xdockernetworkacl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "xdockervpc"
        }
      }
    },
    "xdockermaygo": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "xdocker-main-route"
          }
        ]
      }
    },
    "xdockerpublicroutetable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public-az-1-route-table"
          }
        ]
      }
    },
    "xdockerprivateroutetable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private-az-1-route-table"
          }
        ]
      }
    },
    "bastionhostaz1ip": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": [
        "gw1"
      ],
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "bastionhostaz1"
        }
      }
    },
    "bastionhostaz2ip": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": [
        "gw1"
      ],
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "bastionhostaz2"
        }
      }
    },
    "nathostaz2ip": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": [
        "gw1"
      ],
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "nathostaz2"
        }
      }
    },
    "nathostaz1ip": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": [
        "gw1"
      ],
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "nathostaz1"
        }
      }
    },
    "nathostaz1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionNatAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NatInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "NatInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "xcloud-nat-az-1"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "publicaz1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.119",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "defaultsecuritygroup"
              }
            ]
          }
        ]
      }
    },
    "nathostaz2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionNatAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NatInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "NatInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "xcloud-nat-az-2"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "publicaz2"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.2.58",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "defaultsecuritygroup"
              }
            ]
          }
        ]
      }
    },
    "bastionhostaz1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionBastionAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "BastionInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "bastion-host-az1"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "publicaz1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.123",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "bastionsecuritygroup"
              }
            ]
          }
        ]
      }
    },
    "bastionhostaz2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
	"ImageId" : { "Fn::FindInMap" : [ "AWSRegionBastionAMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
        "InstanceType": { "Ref" : "BastionInstanceType" },
        "KeyName": { "Ref" : "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "bastion-host-az-2"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "publicaz2"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.2.159",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "bastionsecuritygroup"
              }
            ]
          }
        ]
      }
    },
    "bastionsecuritygroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "bastion host",
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "0",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "defaultsecuritygroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "default VPC security group",
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "xdockernetworkacl"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "xdockernetworkacl"
        }
      }
    },
    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "xdockernetworkacl"
        },
        "SubnetId": {
          "Ref": "privateaz1"
        }
      }
    },
    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "xdockernetworkacl"
        },
        "SubnetId": {
          "Ref": "privateaz2"
        }
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "xdockernetworkacl"
        },
        "SubnetId": {
          "Ref": "publicaz1"
        }
      }
    },
    "subnetacl4": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "xdockernetworkacl"
        },
        "SubnetId": {
          "Ref": "publicaz2"
        }
      }
    },
    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "InternetGatewayId": {
          "Ref": "internetgateway"
        }
      }
    },
    "subnetroute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "xdockerpublicroutetable"
        },
        "SubnetId": {
          "Ref": "publicaz2"
        }
      }
    },
    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "xdockerpublicroutetable"
        },
        "SubnetId": {
          "Ref": "publicaz1"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "xdockerpublicroutetable"
        },
        "GatewayId": {
          "Ref": "internetgateway"
        }
      },
      "DependsOn": "gw1"
    },
    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "xdockerprivateroutetable"
        },
        "InstanceId": {
          "Ref": "nathostaz1"
        }
      }
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "xdockervpc"
        },
        "DhcpOptionsId": {
          "Ref": "xdockerdhcp"
        }
      }
    },
    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "bastionsecuritygroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "bastionsecuritygroup"
        },
        "IpProtocol": "icmp",
        "FromPort": "0",
        "ToPort": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "defaultsecuritygroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "defaultsecuritygroup"
        },
        "SourceSecurityGroupOwnerId": "233211978703"
      }
    },
    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "bastionsecuritygroup"
        },
        "IpProtocol": "-1",
	"CidrIp" : "0.0.0.0/0"
      }
    },
    "egress2": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "defaultsecuritygroup"
        },
        "IpProtocol": "-1",
	"CidrIp" : "0.0.0.0/0"
      }
    }
  },
  "Description": "xdocker high availability template"
}
